/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   drawshuman.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hbruvry <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/01/09 10:53:18 by hbruvry           #+#    #+#             */
/*   Updated: 2020/02/28 18:21:46 by hbruvry          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "includes/humangl.h"

/*
** TODO
** glVertexAttribPointer(0, size, type, normalizedn stride, arraybufferoffset);
*/

void	ft_drawvertexbuffer(int fcount)
{
	t_ogl	*o;

	o = ft_getopengl();
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, o->vertexbuffer);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER, o->normalbuffer);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);
	glEnableVertexAttribArray(2);
	glBindBuffer(GL_ARRAY_BUFFER, o->uvbuffer);
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 0, (void*)0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, o->elementbuffer);
	glDrawElements(GL_TRIANGLES, fcount, GL_UNSIGNED_INT, (void*)0);
	glDisableVertexAttribArray(0);
	glDisableVertexAttribArray(1);
	glDisableVertexAttribArray(2);
	return ;
}

/*
** TODO
*/

void	ft_mat4boneset(t_mat4 *mat, t_vec3 *vlrot, t_vec3 *vlpos, t_bone *bone)
{
	t_vec3	vpos;
	
	t_vec3	vtrans;
	t_mat4	mrot;
	t_mat4	mflip;
	t_mat4	mlrot;

	t_vec3	vrot;
	t_vec3	vup;
	float	sx, sy, sz;
	float	cx, cy, cz;
	vrot = ft_vec3cpy(&vrot, *vlrot);
	vrot = ft_vec3add(vrot, bone->vrot);
	sx = sin(vrot.v[0]);
	cx = cos(vrot.v[0]);
	sy = sin(vrot.v[1]);
	cy = cos(vrot.v[1]);
	sz = sin(vrot.v[2]);
	cz = cos(vrot.v[2]);
//	vleft = ft_vec3set(cy * cz, sx * sy * cz + cx * sz, -cx * sy * cz + sx * sz);
	vup = ft_vec3set(-cy * sz, -sx * sy * sz + cx * cz, cx * sy * sz + sx * cz);
	ft_putendl("\nvup");
	ft_vec3print(vup);
//	vforward = ft_vec3set(sy, -sx * cy, cx * cy);

	ft_mat4set(&mrot, IDENTITY);
	ft_mat4set(&mflip, IDENTITY);
	ft_mat4set(&mlrot, IDENTITY);
	mrot = ft_mat4rotate(mrot, ft_vec3add(*vlrot, bone->vrot));
	mlrot = ft_mat4rotate(mlrot, *vlrot);
	vtrans = ft_vec3set(-cy*sz, -sx*sy*sz + cx*cz, cx*sy*sz + sx*cz);
	vtrans = ft_vec3norm(vtrans);
	vtrans = ft_vec3scalar(vtrans, bone->vsize.v[0] * 0.5f);
	ft_putendl("\nvtrans");
	ft_vec3print(vtrans);
	vpos = ft_vec3cpy(&vpos, *vlpos);
	vpos = ft_vec3add(vpos, ft_vec3appmat4(bone->vpos, mlrot));
	ft_mat4set(mat, IDENTITY);
	*mat = ft_mat4transform(*mat,
		bone->vsize,
		ft_vec3add(*vlrot, bone->vrot),
		ft_vec3add(vpos, vtrans));
	bone->vabsrot = ft_vec3cpy(&bone->vabsrot, ft_vec3add(*vlrot, bone->vrot));
	bone->vabspos = ft_vec3cpy(&bone->vabspos, vpos);
	*vlrot = ft_vec3add(*vlrot, bone->vrot);
	*vlpos = ft_vec3add(*vlpos, ft_vec3appmat4(bone->vpos, mlrot));
	vtrans = ft_vec3norm(vtrans);
	vtrans = ft_vec3scalar(vtrans, bone->vsize.v[0]);
	*vlpos = ft_vec3add(*vlpos, vtrans));
	
	return ;
}

void	ft_drawhumanlist(t_ogl *o, t_env *e, t_vec3 vlrot, t_vec3 vlpos, t_list *l)
{
	t_list	*ltmp;
	t_mat4	mbone;

	ltmp = l;
	while (ltmp)
	{
		if (ltmp->content_size == sizeof(t_bone))
		{
			ft_mat4boneset(&mbone, &vlrot, &vlpos, &(*((t_bone*)ltmp->content)));
			ft_setpvmmatrices(e->cam, &(o->shaderprogramid), mbone);
			glUseProgram(o->shaderprogramid);
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, o->texturebuffer);
			glUniform1i(o->textureid, 0);
			glUniform1f(o->texturealphaid, e->obj.texturealpha);
			ft_drawvertexbuffer(e->obj.fcount);
			ft_putendl("vlrot");
			ft_vec3print(vlrot);
			ft_putendl("vlpos");
			ft_vec3print(vlpos);
			ft_printbone(*((t_bone*)ltmp->content), 0);
		}
		else
			ft_drawhumanlist(o, e, vlrot, vlpos, (t_list*)ltmp->content);
		ltmp = ltmp->next;
	}
	return ;
}

/*
** TODO
*/

void	ft_drawhuman(t_ogl *o, t_env *e)
{
	t_vec3	vlrot;
	t_vec3	vlpos;

	vlrot = ft_vec3set(0.f, 0.f, 0.f);
	vlpos = ft_vec3set(0.f, 0.f, 0.f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	ft_processinput(o->window);
	ft_updatecamera(&(e->cam));
	ft_drawhumanlist(o, e, vlrot, vlpos, e->lhuman);
//	ft_printhumanlist(e->lhuman);
	glfwSwapBuffers(o->window);
	glfwPollEvents();
	return ;
}
